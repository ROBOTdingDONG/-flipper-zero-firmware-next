# .github/workflows/ci.yml
name: 'Continuous Integration'

on:
  push:
    branches: [ main, develop ]
    paths:
      - '**.c'
      - '**.h'
      - '**.cpp'
      - '**.hpp'
      - '**.py'
      - '**.yml'
      - '**.yaml'
      - '**.json'
      - 'CMakeLists.txt'
      - 'SConstruct'
      - 'fbt'
  pull_request:
    branches: [ main, develop ]

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  TARGETS: f7
  DEFAULT_TARGET: f7
  FBT_GIT_SUBMODULE_SHALLOW: 1

jobs:
  # Pre-checks for fast feedback
  pre-checks:
    name: 'Pre-flight Checks'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      should-build: ${{ steps.changes.outputs.should-build }}
    steps:
      - name: 'Checkout Code'
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: 'Check for Build-Relevant Changes'
        id: changes
        run: |
          if git diff --name-only HEAD~1 | grep -E '\.(c|h|cpp|hpp|py|yml|yaml|json)$|CMakeLists\.txt|SConstruct|fbt'; then
            echo "should-build=true" >> $GITHUB_OUTPUT
          else
            echo "should-build=false" >> $GITHUB_OUTPUT
          fi

      - name: 'Check Commit Messages'
        run: |
          # Validate conventional commit format
          git log --oneline -1 | grep -E '^[a-f0-9]+ (feat|fix|docs|style|refactor|test|chore|security)(\(.+\))?: .+$' || {
            echo "❌ Commit message must follow conventional commits format"
            echo "Examples: feat: add new feature, fix: resolve bug, security: patch vulnerability"
            exit 1
          }

  # Code quality and security checks
  code-quality:
    name: 'Code Quality & Security'
    runs-on: ubuntu-latest
    needs: pre-checks
    if: needs.pre-checks.outputs.should-build == 'true'
    timeout-minutes: 15
    steps:
      - name: 'Checkout Code'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - name: 'Setup Python'
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: 'Install Dependencies'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            clang-format clang-tidy cppcheck \
            flawfinder splint vera++ \
            python3-pip python3-venv
          
          pip install --upgrade pip
          pip install black isort mypy bandit safety

      - name: 'Code Formatting Check'
        run: |
          echo "🎨 Checking C/C++ formatting..."
          find . -name "*.c" -o -name "*.h" -o -name "*.cpp" -o -name "*.hpp" | \
            xargs clang-format --dry-run --Werror

          echo "🐍 Checking Python formatting..."
          black --check --diff .
          isort --check-only --diff .

      - name: 'Static Analysis - C/C++'
        run: |
          echo "🔍 Running clang-tidy..."
          find . -name "*.c" -o -name "*.cpp" | head -10 | \
            xargs clang-tidy --quiet

          echo "🔍 Running cppcheck..."
          cppcheck --enable=all --inconclusive --std=c11 \
            --suppress=missingIncludeSystem \
            --suppress=unusedFunction \
            --error-exitcode=1 \
            applications/ core/ lib/ || true

          echo "🔍 Running flawfinder..."
          flawfinder --error-level=2 --minlevel=2 . || true

      - name: 'Static Analysis - Python'
        run: |
          echo "🐍 Running mypy..."
          mypy scripts/ tools/ || true

          echo "🔒 Running bandit security scan..."
          bandit -r scripts/ tools/ -f json -o bandit-report.json || true

          echo "📦 Checking dependencies with safety..."
          safety check || true

      - name: 'Upload Security Reports'
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            cppcheck-report.xml

  # Comprehensive testing suite
  test-suite:
    name: 'Test Suite'
    runs-on: ubuntu-latest
    needs: [pre-checks, code-quality]
    if: needs.pre-checks.outputs.should-build == 'true'
    timeout-minutes: 30
    strategy:
      matrix:
        test-type: [unit, integration, security]
        target: [f7]
    steps:
      - name: 'Checkout Code'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - name: 'Setup Build Environment'
        run: |
          # Install ARM toolchain
          sudo apt-get update
          sudo apt-get install -y \
            gcc-arm-none-eabi gdb-multiarch \
            cmake ninja-build \
            lcov gcovr

          # Setup Python environment
          python3 -m pip install --upgrade pip
          pip install -r scripts/requirements.txt

      - name: 'Build Test Firmware'
        run: |
          TARGET_HW="$(echo "${{ matrix.target }}" | sed 's/f//')"
          ./fbt TARGET_HW=$TARGET_HW ENABLE_TESTING=1 DEBUG=1

      - name: 'Run Unit Tests'
        if: matrix.test-type == 'unit'
        run: |
          ./fbt test_unit
          
          # Generate coverage report
          ./fbt coverage_report
          
      - name: 'Run Integration Tests'
        if: matrix.test-type == 'integration'
        run: |
          ./fbt test_integration

      - name: 'Run Security Tests'
        if: matrix.test-type == 'security'
        run: |
          # Test buffer overflow protection
          ./fbt test_security_buffers
          
          # Test cryptographic functions
          ./fbt test_security_crypto
          
          # Test input validation
          ./fbt test_security_validation

      - name: 'Upload Test Results'
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results-${{ matrix.test-type }}-${{ matrix.target }}
          path: |
            build/test-results/
            build/coverage/

  # Build firmware for all targets
  build-firmware:
    name: 'Build Firmware'
    runs-on: ubuntu-latest
    needs: [pre-checks, code-quality, test-suite]
    if: needs.pre-checks.outputs.should-build == 'true'
    timeout-minutes: 20
    strategy:
      matrix:
        target: [f7]
        build-type: [debug, release]
    steps:
      - name: 'Checkout Code'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - name: 'Setup Build Environment'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-arm-none-eabi

      - name: 'Build Firmware'
        run: |
          TARGET_HW="$(echo "${{ matrix.target }}" | sed 's/f//')"
          
          if [ "${{ matrix.build-type }}" == "release" ]; then
            ./fbt TARGET_HW=$TARGET_HW COMPACT=1 DEBUG=0 updater_package
          else
            ./fbt TARGET_HW=$TARGET_HW DEBUG=1 updater_package
          fi

      - name: 'Verify Build Artifacts'
        run: |
          # Check that firmware was built
          ls -la dist/${{ matrix.target }}-*/
          
          # Verify firmware size constraints
          ./scripts/verify_firmware_size.sh dist/${{ matrix.target }}-*/
          
          # Check for debug symbols in release build
          if [ "${{ matrix.build-type }}" == "release" ]; then
            ./scripts/check_release_build.sh dist/${{ matrix.target }}-*/
          fi

      - name: 'Upload Build Artifacts'
        uses: actions/upload-artifact@v3
        with:
          name: firmware-${{ matrix.target }}-${{ matrix.build-type }}
          path: |
            dist/${{ matrix.target }}-*/
          retention-days: 30

  # Security scanning with multiple tools
  security-scan:
    name: 'Security Scanning'
    runs-on: ubuntu-latest
    needs: pre-checks
    if: needs.pre-checks.outputs.should-build == 'true'
    timeout-minutes: 15
    steps:
      - name: 'Checkout Code'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 'Run CodeQL Analysis'
        uses: github/codeql-action/init@v2
        with:
          languages: c, cpp, python
          queries: security-and-quality

      - name: 'Build for CodeQL'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-arm-none-eabi
          ./fbt DEBUG=1 || true

      - name: 'Perform CodeQL Analysis'
        uses: github/codeql-action/analyze@v2

      - name: 'Run Semgrep Security Scan'
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/owasp-top-ten
            p/c
            p/cpp

      - name: 'Run Trivy Security Scan'
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 'Upload Trivy Results'
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Performance benchmarking
  performance-bench:
    name: 'Performance Benchmarks'
    runs-on: ubuntu-latest
    needs: [build-firmware]
    if: github.event_name == 'pull_request'
    timeout-minutes: 15
    steps:
      - name: 'Checkout Code'
        uses: actions/checkout@v4

      - name: 'Download Build Artifacts'
        uses: actions/download-artifact@v3
        with:
          name: firmware-f7-debug

      - name: 'Run Performance Tests'
        run: |
          # Measure firmware size
          ./scripts/measure_firmware_size.sh
          
          # Benchmark critical functions (if applicable)
          ./scripts/benchmark_functions.sh
          
          # Memory usage analysis
          ./scripts/analyze_memory_usage.sh

      - name: 'Compare with Base Branch'
        run: |
          # Compare performance metrics with main branch
          ./scripts/compare_performance.sh main HEAD

      - name: 'Comment PR with Results'
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        with:
          script: |
            const fs = require('fs');
            if (fs.existsSync('performance-results.md')) {
              const results = fs.readFileSync('performance-results.md', 'utf8');
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: results
              });
            }

  # Documentation checks
  documentation:
    name: 'Documentation'
    runs-on: ubuntu-latest
    needs: pre-checks
    timeout-minutes: 10
    steps:
      - name: 'Checkout Code'
        uses: actions/checkout@v4

      - name: 'Setup Documentation Tools'
        run: |
          sudo apt-get update
          sudo apt-get install -y doxygen graphviz
          pip install mkdocs mkdocs-material

      - name: 'Check Documentation Build'
        run: |
          # Build API documentation
          doxygen Doxyfile
          
          # Build user documentation
          mkdocs build --strict

      - name: 'Check Documentation Coverage'
        run: |
          # Verify all public APIs are documented
          ./scripts/check_api_documentation.sh

      - name: 'Upload Documentation'
        uses: actions/upload-artifact@v3
        with:
          name: documentation
          path: |
            build/docs/
            site/

  # Final status check
  ci-success:
    name: 'CI Success'
    runs-on: ubuntu-latest
    needs: [
      pre-checks,
      code-quality,
      test-suite,
      build-firmware,
      security-scan,
      documentation
    ]
    if: always()
    steps:
      - name: 'Check All Jobs Status'
        run: |
          if [ "${{ needs.pre-checks.result }}" != "success" ] || \
             [ "${{ needs.code-quality.result }}" != "success" ] || \
             [ "${{ needs.test-suite.result }}" != "success" ] || \
             [ "${{ needs.build-firmware.result }}" != "success" ] || \
             [ "${{ needs.security-scan.result }}" != "success" ] || \
             [ "${{ needs.documentation.result }}" != "success" ]; then
            echo "❌ One or more CI jobs failed"
            exit 1
          else
            echo "✅ All CI jobs passed successfully"
          fi

---

# .github/workflows/security.yml
name: 'Security'

on:
  schedule:
    - cron: '0 2 * * 1'  # Weekly on Monday at 2 AM UTC
  push:
    branches: [ main ]
    paths:
      - '**.c'
      - '**.h'
      - '**.cpp'
      - '**.hpp'
  workflow_dispatch:

jobs:
  dependency-check:
    name: 'Dependency Security Check'
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout Code'
        uses: actions/checkout@v4

      - name: 'Run OWASP Dependency Check'
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'flipper-zero-firmware-next'
          path: '.'
          format: 'ALL'

      - name: 'Upload Results'
        uses: actions/upload-artifact@v3
        with:
          name: dependency-check-report
          path: reports/

  secrets-scan:
    name: 'Secrets Scanning'
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout Code'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 'Run GitLeaks'
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

      - name: 'Run TruffleHog'
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD

  license-check:
    name: 'License Compliance'
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout Code'
        uses: actions/checkout@v4

      - name: 'License Scanning'
        uses: fossa-contrib/fossa-action@v2
        with:
          api-key: ${{ secrets.FOSSA_API_KEY }}

---

# .github/workflows/release.yml
name: 'Release'

on:
  workflow_run:
    workflows: ["Continuous Integration"]
    branches: [main]
    types: [completed]
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string

env:
  TARGETS: f7
  DEFAULT_TARGET: f7

jobs:
  create-release:
    name: 'Create Release'
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch'
    permissions:
      contents: write
      discussions: write
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      tag_name: ${{ steps.generate_tag.outputs.tag_name }}
    steps:
      - name: 'Checkout Code'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 'Generate Release Tag'
        id: generate_tag
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            TAG_NAME="${{ github.event.inputs.version }}"
          else
            TAG_NAME="v$(date +'%Y.%m.%d')-$(git rev-parse --short HEAD)"
          fi
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT

      - name: 'Generate Changelog'
        id: changelog
        run: |
          # Generate changelog from commits since last release
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            CHANGES=$(git log --oneline --pretty=format:"- %s" HEAD~10..HEAD)
          else
            CHANGES=$(git log --oneline --pretty=format:"- %s" $LAST_TAG..HEAD)
          fi
          
          cat > release_notes.md << EOF
          ## 🚀 What's New
          
          $CHANGES
          
          ## 🔒 Security
          - All security scans passed
          - Dependencies updated to latest secure versions
          
          ## ⬇️ Installation
          
          ### Web Updater (Recommended)
          Use our [web updater](https://your-domain.com/update) for easy installation.
          
          ### Manual Installation
          1. Download the appropriate firmware file below
          2. Follow the [installation guide](https://your-domain.com/docs/installation)
          
          ## 📊 Verification
          
          All release artifacts are signed and can be verified using:
          \`\`\`bash
          gpg --verify firmware.tgz.sig firmware.tgz
          \`\`\`
          EOF

      - name: 'Create Release'
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.generate_tag.outputs.tag_name }}
          release_name: 'Flipper Zero Firmware Next ${{ steps.generate_tag.outputs.tag_name }}'
          body_path: release_notes.md
          draft: false
          prerelease: false

  build-release:
    name: 'Build Release Artifacts'
    runs-on: ubuntu-latest
    needs: create-release
    strategy:
      matrix:
        target: [f7]
    steps:
      - name: 'Checkout Code'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - name: 'Setup Build Environment'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-arm-none-eabi

      - name: 'Build Release Firmware'
        run: |
          TARGET_HW="$(echo "${{ matrix.target }}" | sed 's/f//')"
          ./fbt TARGET_HW=$TARGET_HW COMPACT=1 DEBUG=0 DIST_SUFFIX=${{ needs.create-release.outputs.tag_name }} updater_package

      - name: 'Package Release'
        run: |
          cd dist/${{ matrix.target }}-*
          FIRMWARE_DIR=$(ls -d ${{ matrix.target }}-update-*)
          tar -czf ../../${{ needs.create-release.outputs.tag_name }}-${{ matrix.target }}.tgz $FIRMWARE_DIR
          zip -r ../../${{ needs.create-release.outputs.tag_name }}-${{ matrix.target }}.zip $FIRMWARE_DIR
          cd ../..

      - name: 'Sign Release Artifacts'
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        run: |
          echo "$GPG_PRIVATE_KEY" | gpg --batch --import
          for file in ${{ needs.create-release.outputs.tag_name }}-${{ matrix.target }}.*; do
            gpg --batch --yes --passphrase "$GPG_PASSPHRASE" --armor --detach-sign "$file"
          done

      - name: 'Upload Release Assets'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./${{ needs.create-release.outputs.tag_name }}-${{ matrix.target }}.tgz
          asset_name: ${{ needs.create-release.outputs.tag_name }}-${{ matrix.target }}.tgz
          asset_content_type: application/gzip

      - name: 'Upload Release Assets (ZIP)'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./${{ needs.create-release.outputs.tag_name }}-${{ matrix.target }}.zip
          asset_name: ${{ needs.create-release.outputs.tag_name }}-${{ matrix.target }}.zip
          asset_content_type: application/zip

      - name: 'Upload Signatures'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./${{ needs.create-release.outputs.tag_name }}-${{ matrix.target }}.tgz.asc
          asset_name: ${{ needs.create-release.outputs.tag_name }}-${{ matrix.target }}.tgz.asc
          asset_content_type: text/plain